package org.sample;
import java.io.File;
import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Text;



public class JUnitReport {

	
	static boolean createXML = false;
	static Document doc;
	static DocumentBuilder builder;
	static String filePath = System.getProperty("user.dir")+File.separator+"test-output\\Suite\\test5.xml";
	static Element suite;
	static DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	static String tcName="";
	static long startTimeStamp ;  static long time ;

	public static void createXML() throws Exception
	{
		
		builder = factory.newDocumentBuilder();		
		Document doc = builder.newDocument();
		Element tsSuite = doc.createElement("testsuite");
		tsSuite.setAttribute("hostname",InetAddress.getLocalHost().getHostName());
		tsSuite.setAttribute("ignored","0");
		tsSuite.setAttribute("name","Test");
		tsSuite.setAttribute("tests","0");
		tsSuite.setAttribute("failures","0");
		tsSuite.setAttribute("timestamp",timestamp());
		tsSuite.setAttribute("time","0");		
		tsSuite.setAttribute("errors","0");
		doc.appendChild(tsSuite);
		Comment preProcCom = doc.createComment("  Generated by org.testng.reporters.JUnitXMLReporter  ");
		tsSuite.getParentNode().insertBefore(preProcCom,tsSuite);		
		Transformer tf = TransformerFactory.newInstance().newTransformer();
		tf.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
		//Writer out = new StringWriter();
		tf.transform(new DOMSource(doc), new StreamResult(filePath));
		createXML = true; doc=null;
		
	}
	
	public static void LogResults(boolean bStatus, String msg)
	{		      
		   try
		   {
			       time = ((now().getTime() - startTimeStamp)/1000) % 60;
		    	   if(!createXML) createXML();
				   doc = builder.parse(new File(filePath));
	               suite = doc.getDocumentElement();
	               createCase(bStatus, msg);
			} 	   
		    catch (Exception e) 
		    {
				e.printStackTrace();
			 } 
	}
	
	public static void TestCaseName(String caseName)
	{
		tcName = caseName;
		startTimeStamp = now().getTime();
	}
	private static void createCase(boolean bStatus, String msg)
	{
			Element tc = doc.createElement("testcase");
		        tc.setAttribute("name","test");
		        tc.setAttribute("time",(time+"")); // Seconds  (time+"").substring(0,(time+"").indexOf(".")+3)
		        tc.setAttribute("classname",tcName);			
				suite.appendChild(tc);	
	         if(!bStatus)
	         {
	 			Element failure= doc.createElement("failure");
	 			failure.setAttribute("type","java.lang.AssertionError");
	 			failure.setAttribute("message",msg);		
	 			tc.appendChild(failure);
	 			Text txt = doc.createTextNode("<![CDATA[java.lang.AssertionError: "+msg+" org.sample.AppTest.test1(AppTest.java:50)... Removed 28 stack frames]]>");
	 			failure.appendChild(txt);
	 			suite.setAttribute("failures",(Integer.valueOf(suite.getAttribute("failures"))+1)+"");
	         }
	            suite.setAttribute("tests",(Integer.valueOf(suite.getAttribute("tests"))+1)+"");
	            suite.setAttribute("time", (Float.valueOf(suite.getAttribute("time"))+Float.valueOf(time))+"");
	 		Transformer tf;
			try {
				tf = TransformerFactory.newInstance().newTransformer();
		 		tf.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
		 		tf.transform(new DOMSource(doc), new StreamResult(filePath));
		 		createXML = true; doc=null;
			} catch (Exception e) {
				e.printStackTrace();
			} 

	}
	
     private static String timestamp()
     {
         final SimpleDateFormat stamp = new SimpleDateFormat("dd MMM yyyy HH:mm:ss z");
         stamp.setTimeZone(TimeZone.getTimeZone("GMT"));
         return stamp.format(new Date());
     }
     
     private static Date now()
     {
    	 return new Date();
     }


	
}
